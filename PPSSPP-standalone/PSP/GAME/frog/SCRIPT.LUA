--[[

Name: Clever Frog 
Description: Port of a flash game.
Author: vanek-ridal
E-mail: vanek.ridal@gmail.com
Release at: https://sites.google.com/site/pspcleverfrog/

Please do not edit this file or any other files in this directory, because it could corrupt the game!
  
]]

function copy(source,dest)
	local blocksize = 2048
	local f1 = pge.file.open(source,PGE_FILE_RDONLY)
	local f2 = pge.file.open(dest,PGE_FILE_CREATE+PGE_FILE_WRONLY)
	local bytes_left = f1:size()
	while bytes_left > 0 do
		if bytes_left < blocksize
		then
			f2:write(f1:read(bytes_left))
			bytes_left = 0
		else
			f2:write(f1:read(blocksize))
			bytes_left = bytes_left-blocksize
		end
	end
	f1:close()
	f2:close()
end

if not pge.dir.exists("../../savedata/CLEVERFRO0000") then
	pge.dir.mkdir("../../savedata/CLEVERFRO0000")
	copy("data/SDATA1.BIN","../../savedata/CLEVERFRO0000/DATA.BIN")
	copy("data/SDATA2.BIN","../../savedata/CLEVERFRO0000/PARAM.SFO")
	copy("data/SDATA3.BIN","../../savedata/CLEVERFRO0000/ICON0.PNG")
end

completed = 0

f = pge.file.open("../../savedata/CLEVERFRO0000/DATA.BIN",PGE_FILE_RDONLY)
f:seek(17,PGE_FILE_SET)
completed = string.byte(f:read(1))
f:close()

font14 = pge.font.load("verdana.ttf",14)
font20 = pge.font.load("verdana.ttf",20)
font36 = pge.font.load("verdana.ttf",36)
white = pge.gfx.createcolor(255,255,255)
green = pge.gfx.createcolor(0,200,0)
black = pge.gfx.createcolor(0,0,0)
blacktransparent = pge.gfx.createcolor(0,0,0,128)
water = pge.gfx.createcolor(128,128,255)
grad1 = pge.gfx.createcolor(196,249,253)
grad2 = pge.gfx.createcolor(53,200,254)

frogup    = pge.texture.load("images/frog_up.png",   PGE_VRAM)
frogdown  = pge.texture.load("images/frog_down.png", PGE_VRAM)
frogleft  = pge.texture.load("images/frog_left.png", PGE_VRAM)
frogright = pge.texture.load("images/frog_right.png",PGE_VRAM)
kuv = pge.texture.load("images/kuvshinka.png",PGE_VRAM)
lock = pge.texture.load("images/lock.png",PGE_VRAM)

tex = pge.texture.create(480, 272, PGE_PIXEL_FORMAT_8888, PGE_VRAM)

level = {}
levelinfo = {}
currentlevel = ""
mode = -1
levelnum = 1
mask = 0
mask2 = 0

foff = 0

fxoff = 0
fyoff = 0

moff = 0

fade = 0

drawlock = false

waves = {{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}}

sSelectLevel = "Select level"
sPause = "X = Restart\nO = Select another level\nSTART = Continue"
sCompGameOver = "Congratulations, level completed!\nO = Go to \"Game Over\" screen"
sCompAnotherLevel = "Congratulations, level completed!\nO = Select another level"
sGameOver = "Game over!"
sThanks = "Thank you for playing!\nShare the game with your friends ;)\n\nhttp://goo.gl/WcKDr"
sReturn = "O = Return to level list"

x = { s = " ", c = "-" }
f = pge.file.open("data/GDATA.BIN",PGE_FILE_RDONLY)
for i = 1, 15 do
	x[i] = pge.file.read(f,1)
end
pge.file.close(f)
n = {x[2]..x[1]..x[5]..x[3]..x[5]..x[7]..x.s..x[10]..x[7]..x[9]..x[4],x[6]..x[13],x[3]..x[12]..x[15]..x[5]..x[8]..x.c..x[7]..x[11]..x[14]..x[12]..x[1]}

function savegame()
	local f = pge.file.open("../../savedata/CLEVERFRO0000/DATA.BIN",PGE_FILE_WRONLY)
	f:seek(17,PGE_FILE_SET)
	f:write(string.char(completed))
	f:close()
end

function getlevellist()
	return {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
end

function loadlevel(filename)
	currentlevel = filename
	level = {{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}}
	levelinfo = {}
	local i = 0
	local j = 0
	for i = 1, 16 do
		for j = 1, 16 do
			waves[i][j] = {30,30}
		end
	end
	local tmp = ""
	str = ""
	kuvcount = 0
	local f = pge.file.open("levels/"..filename,PGE_FILE_RDONLY)
	levelinfo.width = tonumber(pge.file.read(f,2))
	levelinfo.height = tonumber(pge.file.read(f,2))
	for j = 1, levelinfo.height do
		for i = 1, levelinfo.width do
			tmp = pge.file.read(f,1)
			if tmp == "2"
			then
				level[i][j] = "1"
				levelinfo.frogX = i
				levelinfo.frogY = j
			else
				if tmp=="1"
				then
					level[i][j] = "1"
					kuvcount = kuvcount+1
				else
					level[i][j] = "0"
				end
			end
		end
	end
	levelinfo.frogorient = tonumber(pge.file.read(f,1))
	pge.file.close(f)
end

function drawlevel()
	if not drawlock then
		pge.texture.settarget(tex)
		pge.gfx.drawrectgrad(0,0,480,272,grad1,grad2,grad2,grad1)
		local i = 0
		local j = 0
		local k = 0
		local l = 0
		local vertices = {}
		local xoff = 240-(levelinfo.width*40)/2-40
		local yoff = 136-(levelinfo.height*30)/2-30
		for i = 1, levelinfo.width do
			for j = 1, levelinfo.height do
				for k = 1, 2 do
					if waves[i][j][k]<30
					then
						for l = 0, 19 do
							vertices[l] = {pge.gfx.createcolor(255,255,255,8.5*(30-waves[i][j][k])),xoff+i*40+15+pge.math.cos(pge.math.deg(l*20))*(30+waves[i][j][k]),yoff+j*30+10+pge.math.sin(pge.math.deg(l*20))*(20+waves[i][j][k]),0}
						end
						pge.gfx.drawcustom(PGE_PRIM_LINE_STRIP,PGE_VERT_CV,vertices)
						waves[i][j][k] = waves[i][j][k]+1
					end
				end
			end
		end
		kuv:activate()
		for i = 1, levelinfo.width do
			for j = 1, levelinfo.height do
				if level[i][j]=="1" then kuv:draw(xoff+i*40,yoff+j*30) end
			end
		end
		if levelinfo.frogorient==0 then
			frogleft:activate()
			frogleft:draw(pge.math.round(xoff+levelinfo.frogX*40+4+fxoff*(pge.math.cos(pge.math.deg(foff*10))-1)),pge.math.round(yoff+levelinfo.frogY*30-12+fxoff*(pge.math.sin(pge.math.deg(foff*10)))))
		end
		if levelinfo.frogorient==1 then
			frogup:activate()
			frogup:draw(pge.math.round(xoff+levelinfo.frogX*40+5),pge.math.round(yoff+levelinfo.frogY*30-12+fyoff*(pge.math.cos(pge.math.deg(foff*10))-1)+fyoff*(pge.math.sin(pge.math.deg(foff*10)))))
		end
		if levelinfo.frogorient==2 then
			frogright:activate()
			frogright:draw(pge.math.round(xoff+levelinfo.frogX*40+4+fxoff*(pge.math.cos(pge.math.deg(foff*10))-1)),pge.math.round(yoff+levelinfo.frogY*30-12-fxoff*(pge.math.sin(pge.math.deg(foff*10)))))
		end
		if levelinfo.frogorient==3 then
			frogdown:activate()
			frogdown:draw(pge.math.round(xoff+levelinfo.frogX*40+5),pge.math.round(yoff+levelinfo.frogY*30+fyoff*(pge.math.cos(pge.math.deg(foff*10))-1)-12-fyoff*(pge.math.sin(pge.math.deg(foff*10)))))
		end
		pge.gfx.rendertoscreen()
	end
	tex:activate()
	tex:draw(240*(1-fade),136*(1-fade),480*fade,272*fade,0,0,480,272,0,255*fade)
end

levels = getlevellist()

while pge.running() do
	pge.controls.update()
	pge.gfx.startdrawing()
	pge.gfx.clearscreen(water)
	if mode == -1 then
		pge.gfx.drawrect(0,0,480,272,black)
		font36:activate()
		font36:printcenter(80,pge.gfx.createcolor(255,255,255,pge.math.fmin(mask,255)),n[1])
		font36:printcenter(140,pge.gfx.createcolor(255,255,255,pge.math.fmin(mask,255)),n[3])
		font14:activate()
		font14:print(120,130,pge.gfx.createcolor(255,255,255,pge.math.fmin(mask,255)),n[2])
		mask = mask+4
		if mask == 500
		then
			mask = 252
			mode = 0
		end
	end
	if mode == 0 then
		if moff < 0 then moff = moff+2 end
		if moff > 0 then moff = moff-2 end
		font14:activate()
		font14:printcenter(6,black,sSelectLevel)
		pge.gfx.drawrect(155,125+moff,170,20,green)
		for i = 1, #levels do
			if i==levelnum
			then
				tmpcolor = white
			else
				tmpcolor = blacktransparent
			end
			if i > completed+1 then
				lock:activate()
				lock:draw(155,127+30*(i-levelnum)+moff)
			end
			font20:activate()
			font20:printcenter(126+30*(i-levelnum)+moff,tmpcolor,i)
		end
		if pge.controls.pressed(PGE_CTRL_DOWN) then
			if levelnum < #levels then levelnum=levelnum+1 moff=30 end
		end
		if pge.controls.pressed(PGE_CTRL_UP) then
			if levelnum > 1 then levelnum=levelnum-1 moff=-30 end
		end
		if pge.controls.pressed(PGE_CTRL_CROSS) and (levelnum <= completed+1) then
			loadlevel(levelnum.."")
			mode = 1
			fade = 0
			mask = 0
			drawlock = false
		end
		if mask > 0
		then
			mask = mask-4
		end
		if fade > 0
		then
			fade = fade-0.05
			drawlevel()
		end
		pge.gfx.drawrect(0,0,480,272,pge.gfx.createcolor(0,0,0,mask))
		font36:activate()
		font36:printcenter(80,pge.gfx.createcolor(255,255,255,mask),n[1])
		font36:printcenter(140,pge.gfx.createcolor(255,255,255,mask),n[3])
		font14:activate()
		font14:print(120,130,pge.gfx.createcolor(255,255,255,mask),n[2])
	end
	if mode == 1 then
		if fade < 1
		then
			fade = fade+0.05
		end
		drawlevel()
		if pge.controls.pressed(PGE_CTRL_SQUARE) and not (levelinfo.frogorient==2) and (foff==0) then
			move = false
			i = levelinfo.frogX-1
			while (i>0) and not move do
				if level[i][levelinfo.frogY]=="1" then move = i end
				i = i-1
			end
			if move then
				kuvcount = kuvcount-1
				level[levelinfo.frogX][levelinfo.frogY] = "0"
				waves[levelinfo.frogX][levelinfo.frogY][1] = 0
				fxoff = 40*(move-levelinfo.frogX)/2
				levelinfo.frogX = move
				waves[levelinfo.frogX][levelinfo.frogY][2] = -30
				levelinfo.frogorient = 0
				foff=18
			end
		end
		if pge.controls.pressed(PGE_CTRL_TRIANGLE) and not (levelinfo.frogorient==3) and (foff==0) then
			move = false
			i = levelinfo.frogY-1
			while (i>0) and not move do
				if level[levelinfo.frogX][i]=="1" then move = i end
				i = i-1
			end
			if move then
				kuvcount = kuvcount-1
				level[levelinfo.frogX][levelinfo.frogY] = "0"
				waves[levelinfo.frogX][levelinfo.frogY][1] = 0
				fyoff=30*(move-levelinfo.frogY)/2
				levelinfo.frogY = move
				waves[levelinfo.frogX][levelinfo.frogY][2] = -30
				levelinfo.frogorient = 1
				foff=18
			end
		end
		if pge.controls.pressed(PGE_CTRL_CIRCLE) and not (levelinfo.frogorient==0) and (foff==0) then
			move = false
			i = levelinfo.frogX+1
			while (i<levelinfo.width+1) and not move do
				if level[i][levelinfo.frogY]=="1" then move = i end
				i = i+1
			end
			if move then
				kuvcount = kuvcount-1
				level[levelinfo.frogX][levelinfo.frogY] = "0"
				waves[levelinfo.frogX][levelinfo.frogY][1] = 0
				fxoff=40*(move-levelinfo.frogX)/2
				levelinfo.frogX = move
				waves[levelinfo.frogX][levelinfo.frogY][2] = -30
				levelinfo.frogorient = 2
				foff=18
			end
		end
		if pge.controls.pressed(PGE_CTRL_CROSS) and not (levelinfo.frogorient==1) and (foff==0) then
			move = false
			i = levelinfo.frogY+1
			while (i<levelinfo.height+1) and not move do
				if level[levelinfo.frogX][i]=="1" then move = i end
				i = i+1
			end
			if move then
				kuvcount = kuvcount-1
				level[levelinfo.frogX][levelinfo.frogY] = "0"
				waves[levelinfo.frogX][levelinfo.frogY][1] = 0
				fyoff=30*(move-levelinfo.frogY)/2
				levelinfo.frogY = move
				waves[levelinfo.frogX][levelinfo.frogY][2] = -30
				levelinfo.frogorient = 3
				foff=18
			end
		end
		if pge.controls.pressed(PGE_CTRL_START) then
			mode = 2
		end
		if kuvcount==0 then
			mode = 3
		end
	end
	if mode == 2 then
		drawlevel()
		pge.gfx.drawrect(100,80,280,100,blacktransparent)
		font14:activate()
		font14:print(120,110,white,sPause)
		if pge.controls.pressed(PGE_CTRL_CIRCLE) then mode=0 end
		if pge.controls.pressed(PGE_CTRL_CROSS) then loadlevel(levelnum.."") mode=1 end
		if pge.controls.pressed(PGE_CTRL_START) then mode=1 end
	end
	if mode == 3 then
		drawlevel()
		if foff==0 then
			if levelnum == #levels
			then
				pge.gfx.drawrect(100,80,280,100,blacktransparent)
				font14:activate()
				font14:print(120,110,white,sCompGameOver)
				if pge.controls.pressed(PGE_CTRL_CIRCLE) then
					mode=4
					if levelnum == completed+1 then
						completed = completed+1
						savegame()
					end
				end
			else
				pge.gfx.drawrect(100,80,280,100,blacktransparent)
				font14:activate()
				font14:print(120,110,white,sCompAnotherLevel)
				if pge.controls.pressed(PGE_CTRL_CIRCLE) then
					mode=0
					if levelnum == completed+1 then
						completed = completed+1
						savegame()
					end
				end
			end
		end
	end
	if mode == 4 then
		if mask < 255
		then
			drawlevel()
			mask = mask + 5
			pge.gfx.drawrect(0,0,480,272,pge.gfx.createcolor(0,0,0,mask))
			font14:activate()
			font14:printcenter(50,pge.gfx.createcolor(255,255,255,mask),sGameOver)
		else
			if mask2 < 255 then mask2 = mask2+15 end
			pge.texture.settarget(tex)
			pge.gfx.drawrect(0,0,480,272,black)
			font14:activate()
			font14:printcenter(50,white,sGameOver)
			font14:print(115,110,pge.gfx.createcolor(255,255,255,mask2),sThanks)
			font14:printcenter(225,pge.gfx.createcolor(255,255,255,mask2),sReturn)
			pge.gfx.rendertoscreen()
			tex:activate()
			tex:draw(0,0)
			if pge.controls.pressed(PGE_CTRL_CIRCLE) then drawlock=true mask2=0 mask=0 mode=0 end
		end
	end
	if foff>0 then foff=foff-1 end
	pge.gfx.enddrawing()
	pge.gfx.swapbuffers()
end
